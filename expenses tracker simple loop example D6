// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

contract ExpenseTracker {
    struct Expense {
        address user;
        string description;
        uint amount;
    }

    Expense[] public expenses; //an array of expenses

    constructor() {
        expenses.push(Expense(msg.sender, "Groceries", 50));
        expenses.push(Expense(msg.sender, "Transportation", 30));
        expenses.push(Expense(msg.sender, "Dining out", 25));  //expenses used in the LOOP
    }

    function addExpense(string memory _description, uint _amount) public {
        expenses.push(Expense(msg.sender, _description, _amount));
    }

    function getTotalExpenses(address _user) public view returns (uint) {
        uint256 totalexpenses = 0; //creating a total expenses variable for the loop

        for (uint i =0; i < expenses.length; i++){
            if (expenses[i].user == _user){  //checks the user we're checking
                totalexpenses += expenses[i].amount;  //expenses at position (i) gsts added to total expenses variable (uint256)
            }
        }
        return totalexpenses;  //returns all expenses
    }
}
