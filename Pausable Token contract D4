// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

contract PausableToken {
    address public owner;
    bool public paused;
    mapping(address => uint) public balances;

    constructor() {
        owner = msg.sender;
        paused = false;
        balances[owner] = 1000;
    }

    modifier OnlyOwner(){
        require(msg.sender == owner, "you are not the owner");
        _;
    }

    modifier NotPaused(){
        require(paused == false, "Contract is paused");
        _;
    }

    function Pause() public OnlyOwner{
        paused = true;

    }

    function UnPause() public OnlyOwner{
        paused = false;

    }

    function transfer(address to,uint amount) public NotPaused{ //here we added the modifier that will check the function, we can use it anywhere 
        require(balances[msg.sender] >= amount,"Insufficient balance");

        balances[msg.sender] -= amount;
        balances[to] += amount;
    }



}

