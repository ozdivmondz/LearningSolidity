// SPDX-License-Identifier: MIT

pragma solidity ^0.8.8;

contract Twitter {

    struct Tweet {
        address author;
        string content;
        uint256 timestamp;
        uint256 likes;
    }

    mapping(address => Tweet[]) public tweets;

    function CreateTweet(string memory _tweet) public{
        Tweet memory NewTweet = Tweet ({
            author: msg.sender,
            content: _tweet,
            timestamp: block.timestamp,
            likes: 0
        });

        tweets[msg.sender].push(NewTweet); //will be the person who's currently connecting with the contract.
    }

    function GetTweet(address _owner, uint _i) public view returns (Tweet memory) { //_i is the index value that will be used in mapping the array 0 -> tweet #1
        return tweets[_owner][_i]; //returns the tweet that was created and mapped to the address of msg.sender 
    }

    function GetAllTweets(address _owner) public view returns (Tweet[] memory){
        return tweets[_owner]; //returns ALL tweets from the array
    }
}
